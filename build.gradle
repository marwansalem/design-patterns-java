/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
//    id 'org.springframework.boot'
//    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
}

//group = 'com.example'
//version = '0.0.1-SNAPSHOT'
//sourceCompatibility = '17'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}
dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'junit:junit:4.12'
    // added as implementation to make it easier to explain pattern unit tests in the same class
    implementation 'junit:junit:4.12'
    // https://mvnrepository.com/artifact/com.google.inject/guice
    implementation 'com.google.inject:guice:4.0'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation'org.reflections:reflections:0.9.11'
    implementation 'org.apache.commons:commons-lang3:3.0'

    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
//    implementation 'org.springframework.boot:spring-boot/-starter'
//    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.statemachine:spring-statemachine-core:3.2.0'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
